<launch>

  <node name="$(anon rviz)"
        pkg="rviz" type="rviz"
        args="-d $(find pr2_picking)/rvizconfig/pr2.rviz" />

<!-- {{ kinect -->

  <group ns="/kinect_head/rgb">
    <node name="republish_rgb"
          pkg="image_transport" type="republish"
          args="compressed raw">
      <remap from="in" to="image_raw" />
      <remap from="out" to="/kinect_head_localhost/rgb/image_raw" />
    </node>
  </group>
  <group ns="/kinect_head_localhost/rgb">
    <node name="rectify_rgb"
          pkg="nodelet" type="nodelet"
          args="standalone image_proc/rectify">
      <remap from="camera_info" to="/kinect_head/rgb/camera_info" />
      <remap from="image_mono" to="image_raw" />
      <remap from="image_rect" to="image_rect_color" />
    </node>
  </group>
  <group ns="/kinect_head/depth_registered">
    <node name="republish_depth"
          pkg="image_transport" type="republish"
          args="compressedDepth raw">
      <remap from="in" to="image_raw" />
      <remap from="out" to="/kinect_head_localhost/depth_registered/image_raw" />
    </node>
  </group>
  <group>
    <remap from="/kinect_head_localhost/rgb/camera_info"
           to="/kinect_head/rgb/camera_info" />
    <remap from="/kinect_head_localhost/depth_registered/camera_info"
           to="/kinect_head/depth_registered/camera_info" />
    <include file="$(find openni2_launch)/launch/openni2.launch">
      <arg name="load_driver" value="false" />
      <arg name="camera" value="kinect_head_localhost" />
      <arg name="depth_registration" value="true" />
      <arg name="publish_tf" value="false" />
    </include>
  </group>

<!-- }} kinect -->

<!-- {{ laser -->

  <node name="laser_profile_commander"
        pkg="laser_scan_3d"
        type="my_robot_cal_tilt_profile.py"
        args="laser_tilt_controller 119" />

  <node name="laser_scan_assembler"
        pkg="laser_assembler" type="laser_scan_assembler">
    <remap from="scan" to="/tilt_scan" />
    <rosparam>
      fixed_frame: base_link
      tf_cache_time_secs: 10.0
      max_scans: 4800
      ignore_laser_skew: true
    </rosparam>
  </node>

  <node name="assemble_scans2_client"
        pkg="laser_scan_3d" type="assemble_scans2.py">
    <remap from="scan" to="tilt_scan" />
  </node>

<!-- }} laser -->

<!-- {{ colorize laser -->

  <node name="transform_cloud"
        pkg="nodelet" type="nodelet"
        args="standalone jsk_pcl_utils/TfTransformCloud">
    <remap from="~input" to="assemble_scans2_client/output" />
    <rosparam>
      target_frame_id: /head_mount_kinect_rgb_optical_frame
    </rosparam>
  </node>
  <node name="add_color"
        pkg="nodelet" type="nodelet"
        args="standalone jsk_pcl/AddColorFromImage">
    <remap from="~input" to="transform_cloud/output" />
    <remap from="~input/image" to="/kinect_head_localhost/rgb/image_rect_color" />
    <remap from="~input/camera_info" to="/kinect_head/rgb/camera_info" />
  </node>

<!-- }} colorize laser -->

<!-- {{ organize laser -->

  <node name="depth_image_creator"
        pkg="nodelet" type="nodelet"
        args="standalone jsk_pcl/DepthImageCreator">
    <remap from="~input" to="assemble_scans2_client/output" />
    <remap from="~info" to="/kinect_head/rgb/camera_info" />
    <rosparam>
      use_approximate: true
      max_queue_size: 10
    </rosparam>
  </node>
  <node name="add_color_organized"
        pkg="nodelet" type="nodelet"
        args="standalone jsk_pcl/AddColorFromImageToOrganized">
    <remap from="~input" to="depth_image_creator/output_cloud" />
    <remap from="~input/image" to="/kinect_head_localhost/rgb/image_rect_color" />
  </node>

<!-- }} organize laser -->

</launch>
